.dq7btjj > div > div{opacity:1 !important;}
/*# sourceMappingURL=data:application/json;base64,*/
.sscjc7e{position:-webkit-sticky;position:sticky;background-color:var(--background);bottom:0;z-index:999;}
/*# sourceMappingURL=data:application/json;base64,*/
@layer cds{.overflowStyle-o1npfhjk{overflow:auto;text-overflow:unset;white-space:normal;}
.truncationStyle-t1vpzve9{display:block;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;min-width:0;}}

/*# sourceMappingURL=1554.css.map*/