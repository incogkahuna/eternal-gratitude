.b1j77g3o{word-break:break-word;}
/*# sourceMappingURL=data:application/json;base64,*/
@layer cds{.styles-s1xygpjx{height:56px;}
.compactStyles-cczlfjm{height:40px;}}

/*# sourceMappingURL=4787.css.map*/