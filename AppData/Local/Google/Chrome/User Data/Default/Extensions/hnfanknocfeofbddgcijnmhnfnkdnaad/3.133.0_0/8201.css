.i14b60qv{width:32px;height:32px;-webkit-flex-shrink:0;-ms-flex-negative:0;flex-shrink:0;}
/*# sourceMappingURL=data:application/json;base64,*/
.ic7twu{width:14px;height:14px;-webkit-flex-shrink:0;-ms-flex-negative:0;flex-shrink:0;border-radius:50%;margin-right:var(--space-1);}
/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL2xpYnMvd2FsbGV0LWNkcy1leHRlbnNpb24vY29tcG9uZW50cy9OZXR3b3JrU2VsZWN0aW9uU3ViSGVhZGVyLnRzeCJdLCJuYW1lcyI6WyIuaWM3dHd1Il0sIm1hcHBpbmdzIjoiQUE4R2NBIiwiZmlsZSI6Ii93b3Jrc3BhY2VzL2xpYnMvd2FsbGV0LWNkcy1leHRlbnNpb24vY29tcG9uZW50cy9OZXR3b3JrU2VsZWN0aW9uU3ViSGVhZGVyLnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgZGVmaW5lTWVzc2FnZXMsIHVzZUludGwgfSBmcm9tICdyZWFjdC1pbnRsJztcbmltcG9ydCB7IHN0eWxlZCB9IGZyb20gJ0BsaW5hcmlhL3JlYWN0JztcbmltcG9ydCB7XG4gIENoYWluRGV0YWlscyxcbiAgdXNlTmV0d29ya1N3aXRjaGVyT3BlbixcbiAgdXNlTmV0d29ya1N3aXRjaGVyVmlld2VkLFxufSBmcm9tICdjYi13YWxsZXQtYW5hbHl0aWNzL3N3YXAnO1xuaW1wb3J0IHsgTmV0d29yayB9IGZyb20gJ2NiLXdhbGxldC1kYXRhL3N0b3Jlcy9OZXR3b3Jrcy9tb2RlbHMvTmV0d29yayc7XG5pbXBvcnQgeyBJY29uIH0gZnJvbSAnQGNiaHEvY2RzLXdlYi9pY29ucy9JY29uJztcbmltcG9ydCB7IEhTdGFjayB9IGZyb20gJ0BjYmhxL2Nkcy13ZWIvbGF5b3V0JztcbmltcG9ydCB7IEJveCB9IGZyb20gJ0BjYmhxL2Nkcy13ZWIvbGF5b3V0L0JveCc7XG5pbXBvcnQgeyBUb29sdGlwIH0gZnJvbSAnQGNiaHEvY2RzLXdlYi9vdmVybGF5cyc7XG5pbXBvcnQgeyBQcmVzc2FibGUgfSBmcm9tICdAY2JocS9jZHMtd2ViL3N5c3RlbSc7XG5pbXBvcnQgeyBUZXh0TGFiZWwxIH0gZnJvbSAnQGNiaHEvY2RzLXdlYi90eXBvZ3JhcGh5JztcblxuZXhwb3J0IGNvbnN0IG1lc3NhZ2VzID0gZGVmaW5lTWVzc2FnZXMoe1xuICBjaGFpbkRpc3BsYXlOYW1lOiB7XG4gICAgZGVmYXVsdE1lc3NhZ2U6ICdPbiB7bmFtZX0nLFxuICAgIGRlc2NyaXB0aW9uOiAnQ2hhaW4gZGlzcGxheSBuYW1lJyxcbiAgfSxcbiAgY2hhaW5UaXRsZVdpdGhTdWZmaXg6IHtcbiAgICBkZWZhdWx0TWVzc2FnZTogJ3tuYW1lfSB7c3VmZml4fScsXG4gICAgZGVzY3JpcHRpb246ICdDaGFpbiBkaXNwbGF5IHRpdGxlIHdpdGggc3VmZml4JyxcbiAgfSxcbiAgY2hhaW5UaXRsZToge1xuICAgIGRlZmF1bHRNZXNzYWdlOiAne25hbWV9JyxcbiAgICBkZXNjcmlwdGlvbjogJ0NoYWluIGRpc3BsYXkgdGl0bGUnLFxuICB9LFxuICB0b29sdGlwVGV4dDoge1xuICAgIGRlZmF1bHRNZXNzYWdlOiAnU3dpdGNoIG5ldHdvcmtzJyxcbiAgICBkZXNjcmlwdGlvbjogJ1Rvb2x0aXAgdGV4dCcsXG4gIH0sXG4gIG1haW5uZXQ6IHtcbiAgICBkZWZhdWx0TWVzc2FnZTogJ01haW5uZXQnLFxuICAgIGRlc2NyaXB0aW9uOiAnTWFpbm5ldCB0ZXh0JyxcbiAgfSxcbiAgdGVzdG5ldDoge1xuICAgIGRlZmF1bHRNZXNzYWdlOiAnVGVzdG5ldCcsXG4gICAgZGVzY3JpcHRpb246ICdUZXN0bmV0IHRleHQnLFxuICB9LFxufSk7XG5cbnR5cGUgUHJvcHMgPSB7XG4gIG5ldHdvcms6IE5ldHdvcmsgfCB1bmRlZmluZWQ7XG4gIG9uUHJlc3M6ICgpID0+IHZvaWQ7XG4gIGNoYWluRGV0YWlsczogQ2hhaW5EZXRhaWxzO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIE5ldHdvcmtTZWxlY3Rpb25TdWJIZWFkZXIoeyBuZXR3b3JrLCBvblByZXNzLCBjaGFpbkRldGFpbHMgfTogUHJvcHMpIHtcbiAgY29uc3QgeyBmb3JtYXRNZXNzYWdlIH0gPSB1c2VJbnRsKCk7XG5cbiAgY29uc3QgdHJpZ2dlck5ldHdvcmtTd2l0Y2hlck9wZW4gPSB1c2VOZXR3b3JrU3dpdGNoZXJPcGVuKHsgY2hhaW5EZXRhaWxzIH0pO1xuICB1c2VOZXR3b3JrU3dpdGNoZXJWaWV3ZWQoeyBjaGFpbkRldGFpbHMgfSk7XG5cbiAgY29uc3Qgb25PcGVuTmV0d29ya1NlbGVjdGlvbiA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICB0cmlnZ2VyTmV0d29ya1N3aXRjaGVyT3BlbigpO1xuICAgIG9uUHJlc3MoKTtcbiAgfSwgW29uUHJlc3MsIHRyaWdnZXJOZXR3b3JrU3dpdGNoZXJPcGVuXSk7XG5cbiAgaWYgKCFuZXR3b3JrKSByZXR1cm4gbnVsbDtcblxuICBjb25zdCBjdXJyZW50Q2hhaW4gPSBuZXR3b3JrLmFzQ2hhaW4oKTtcblxuICBjb25zdCBuZXR3b3JrTmFtZSA9IGZvcm1hdE1lc3NhZ2UobWVzc2FnZXMuY2hhaW5EaXNwbGF5TmFtZSwge1xuICAgIG5hbWU6IGN1cnJlbnRDaGFpbj8uZGlzcGxheU5hbWUsXG4gIH0pO1xuXG4gIGNvbnN0IHRpdGxlID0gY3VycmVudENoYWluPy5pc1Rlc3RuZXRcbiAgICA/IGZvcm1hdE1lc3NhZ2UobWVzc2FnZXMuY2hhaW5UaXRsZVdpdGhTdWZmaXgsIHtcbiAgICAgICAgbmFtZTogbmV0d29ya05hbWUsXG4gICAgICAgIHN1ZmZpeDogZm9ybWF0TWVzc2FnZShtZXNzYWdlcy50ZXN0bmV0KSxcbiAgICAgIH0pXG4gICAgOiBmb3JtYXRNZXNzYWdlKG1lc3NhZ2VzLmNoYWluVGl0bGUsIHtcbiAgICAgICAgbmFtZTogbmV0d29ya05hbWUsXG4gICAgICB9KTtcblxuICByZXR1cm4gKFxuICAgIDxQcmVzc2FibGVcbiAgICAgIGJhY2tncm91bmQ9XCJ0cmFuc3BhcmVudFwiXG4gICAgICBvbkNsaWNrPXtvbk9wZW5OZXR3b3JrU2VsZWN0aW9ufVxuICAgICAgdGVzdElEPVwibmV0d29yay1zZWxlY3Rpb24tc3ViLWhlYWRlclwiXG4gICAgPlxuICAgICAgPEJveCBhbGlnbkl0ZW1zPVwiY2VudGVyXCIganVzdGlmeUNvbnRlbnQ9XCJjZW50ZXJcIj5cbiAgICAgICAgPFRvb2x0aXAgY29udGVudD17Zm9ybWF0TWVzc2FnZShtZXNzYWdlcy50b29sdGlwVGV4dCl9IHBsYWNlbWVudD1cImJvdHRvbVwiPlxuICAgICAgICAgIDxIU3RhY2tcbiAgICAgICAgICAgIGFsaWduSXRlbXM9XCJjZW50ZXJcIlxuICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ9XCJjZW50ZXJcIlxuICAgICAgICAgICAgYmFja2dyb3VuZD1cImJnU2Vjb25kYXJ5XCJcbiAgICAgICAgICAgIGJvcmRlclJhZGl1cz17MTAwMH1cbiAgICAgICAgICAgIHBhZGRpbmdYPXsxfVxuICAgICAgICAgICAgZmxleFNocmluaz17MX1cbiAgICAgICAgICAgIGhlaWdodD17Mjh9XG4gICAgICAgICAgPlxuICAgICAgICAgICAge2N1cnJlbnRDaGFpbj8uY2hhaW5JbWFnZVVybCA/IChcbiAgICAgICAgICAgICAgPEltYWdlIHNyYz17Y3VycmVudENoYWluPy5jaGFpbkltYWdlVXJsfSBhbHQ9e2Ake2N1cnJlbnRDaGFpbj8uZGlzcGxheU5hbWV9IGljb25gfSAvPlxuICAgICAgICAgICAgKSA6IG51bGx9XG4gICAgICAgICAgICA8SFN0YWNrIGFsaWduSXRlbXM9XCJjZW50ZXJcIj5cbiAgICAgICAgICAgICAgPFRleHRMYWJlbDEgdGVzdElEPVwibmV0d29yay1zZWxlY3Rpb24tY3VycmVudC1uZXR3b3JrXCIgYXM9XCJwXCIgY29sb3I9XCJmZ1wiPlxuICAgICAgICAgICAgICAgIHt0aXRsZX1cbiAgICAgICAgICAgICAgPC9UZXh0TGFiZWwxPlxuICAgICAgICAgICAgICA8SWNvbiBuYW1lPVwiY2FyZXRSaWdodFwiIHNpemU9XCJ4c1wiIGNvbG9yPVwiZmdcIiBwYWRkaW5nU3RhcnQ9ezAuNX0gLz5cbiAgICAgICAgICAgIDwvSFN0YWNrPlxuICAgICAgICAgIDwvSFN0YWNrPlxuICAgICAgICA8L1Rvb2x0aXA+XG4gICAgICA8L0JveD5cbiAgICA8L1ByZXNzYWJsZT5cbiAgKTtcbn1cblxuY29uc3QgSW1hZ2UgPSBzdHlsZWQuaW1nYFxuICB3aWR0aDogMTRweDtcbiAgaGVpZ2h0OiAxNHB4O1xuICBmbGV4LXNocmluazogMDtcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xuICBtYXJnaW4tcmlnaHQ6IHZhcigtLXNwYWNlLTEpO1xuYDtcbiJdfQ==*/
@layer cds{.styles-s1xygpjx{height:56px;}
.compactStyles-cczlfjm{height:40px;}}
.s1yu1oz6{color:var(--color-fgPrimary);font-size:62px;}
.c4asnyq{max-width:var(--c4asnyq-0);display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex:1;-ms-flex:1;flex:1;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;position:relative;-webkit-transform:scale(var(--c4asnyq-1));-ms-transform:scale(var(--c4asnyq-1));transform:scale(var(--c4asnyq-1));}
.srdcbwi.c4asnyq{-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;-webkit-transform-origin:left;-ms-transform-origin:left;transform-origin:left;}
.i1as142y{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}
.s1cg1i7p{width:var(--s1cg1i7p-0);padding:0;margin:0;box-shadow:none;border:none;overflow:hidden;outline:none;color:var(--color-fgPrimary);font-family:CoinbaseSans;font-size:62px;text-align:right;background-color:var(--color-bg);}.s1cg1i7p::-webkit-input-placeholder{color:var(--color-fgPrimary);line-height:normal;opacity:1;}.s1cg1i7p::-moz-placeholder{color:var(--color-fgPrimary);line-height:normal;opacity:1;}.s1cg1i7p:-ms-input-placeholder{color:var(--color-fgPrimary);line-height:normal;opacity:1;}.s1cg1i7p::placeholder{color:var(--color-fgPrimary);line-height:normal;opacity:1;}
.sel4t34.s1cg1i7p{font-size:64px;}
.s1agtbqe{font-family:CoinbaseSans;font-size:62px;text-align:left;position:absolute;bottom:0;right:0;visibility:hidden;}
.s1cdrkpb.s1agtbqe{font-size:64px;}
/*# sourceMappingURL=data:application/json;base64,*/
.t70pwom{display:inline-block;margin:0 0 0 4px;}
/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL2xpYnMvd2FsbGV0LWNkcy1leHRlbnNpb24vY29tcG9uZW50cy9UeEVycm9yL1R4RXJyb3IudHN4Il0sIm5hbWVzIjpbIi50NzBwd29tIl0sIm1hcHBpbmdzIjoiQUEwRnFCQSIsImZpbGUiOiIvd29ya3NwYWNlcy9saWJzL3dhbGxldC1jZHMtZXh0ZW5zaW9uL2NvbXBvbmVudHMvVHhFcnJvci9UeEVycm9yLnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBkZWZpbmVNZXNzYWdlcywgdXNlSW50bCB9IGZyb20gJ3JlYWN0LWludGwnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGxpbmFyaWEvY29yZSc7XG5pbXBvcnQgeyBRdW90ZUVycm9yIH0gZnJvbSAnY2Itd2FsbGV0LWRhdGEvc3RvcmVzL1N3YXAvYXBpL3VzZVN3YXBRdW90ZSc7XG5pbXBvcnQgeyBlcnJvck1lc3NhZ2VzIH0gZnJvbSAnY2Itd2FsbGV0LWRhdGEvc3RvcmVzL1N3YXAvY29uc3RhbnRzJztcbmltcG9ydCB7IEdlbmVyYXRlVHJhbnNhY3Rpb25zRXJyb3IgfSBmcm9tICdjYi13YWxsZXQtZGF0YS9zdG9yZXMvU3dhcC9ob29rcy91c2VHZW5lcmF0ZVRyYW5zYWN0aW9ucyc7XG5pbXBvcnQgY2FtZWxDYXNlIGZyb20gJ2xvZGFzaC9jYW1lbENhc2UnO1xuaW1wb3J0IHsgSWNvbiB9IGZyb20gJ0BjYmhxL2Nkcy13ZWIvaWNvbnMnO1xuaW1wb3J0IHsgQm94LCBIU3RhY2sgfSBmcm9tICdAY2JocS9jZHMtd2ViL2xheW91dCc7XG5pbXBvcnQgeyBUZXh0TGVnYWwgfSBmcm9tICdAY2JocS9jZHMtd2ViL3R5cG9ncmFwaHknO1xuXG5jb25zdCBtZXNzYWdlczogUmVjb3JkPHN0cmluZywgYW55PiA9IGRlZmluZU1lc3NhZ2VzKHtcbiAgbm90RW5vdWdoQmFsYW5jZUZvck1pbmVyRmVlVG9vbHRpcDoge1xuICAgIGRlZmF1bHRNZXNzYWdlOiAnVGhlIG5ldHdvcmsgZmVlIGRvZXNu4oCZdCBnbyB0byBDb2luYmFzZSBhbmQgaXQgbWF5IGJlIGxlc3MgdGhhbiBvdXIgZXN0aW1hdGUuJyxcbiAgICBkZXNjcmlwdGlvbjogJ1Rvb2x0aXAgZXhwbGFpbmluZyB0aGUgbm90IGVub3VnaCBiYWxhbmNlIGZvciBtaW5lciBmZWUgZXJyb3IgbWVzc2FnZScsXG4gIH0sXG4gIHplcm9CYWxhbmNlRm9yTWluZXJGZWVUb29sdGlwOiB7XG4gICAgZGVmYXVsdE1lc3NhZ2U6ICdBZGQge2NyeXB0b1N5bWJvbH0gdG8geW91ciB3YWxsZXQgb3Igc3dpdGNoIHRvIGFub3RoZXIgbmV0d29yay4nLFxuICAgIGRlc2NyaXB0aW9uOiAnVG9vbHRpcCBleHBsYWluaW5nIHRoZSB6ZXJvIGJhbGFuY2UgZm9yIG1pbmVyIGZlZSBlcnJvciBtZXNzYWdlJyxcbiAgfSxcbiAgZ2VuZXJpY0Vycm9yOiB7XG4gICAgZGVmYXVsdE1lc3NhZ2U6ICdTb21ldGhpbmcgd2VudCB3cm9uZycsXG4gICAgZGVzY3JpcHRpb246ICdNZXNzYWdlIHRvIGJlIGRpc3BsYXllZCBhcyBhbiBnZW5lcmljIGVycm9yJyxcbiAgfSxcbiAgbGlxdWlkaXR5RXJyb3I6IHtcbiAgICBkZWZhdWx0TWVzc2FnZTogJ05vdCBlbm91Z2ggbGlxdWlkaXR5IGZvdW5kIGZvciB0aGlzIGFzc2V0IHBhaXIuIFRyeSBhZ2FpbiBsYXRlci4nLFxuICAgIGRlc2NyaXB0aW9uOiAnTWVzc2FnZSB0byBiZSBkaXNwbGF5ZWQgZm9yIGEgbGlxdWlkaXR5IGVycm9yJyxcbiAgfSxcbn0pO1xuXG50eXBlIFByb3BzID0ge1xuICB0cmlnZ2VyQW5hbHl0aWNzPzogKCkgPT4gdm9pZDtcbiAgZXJyb3I6IEdlbmVyYXRlVHJhbnNhY3Rpb25zRXJyb3IgfCBRdW90ZUVycm9yO1xuICBoYXNUb29sdGlwPzogYm9vbGVhbjtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBUeEVycm9yKHsgZXJyb3IsIHRyaWdnZXJBbmFseXRpY3MsIGhhc1Rvb2x0aXAgPSBmYWxzZSB9OiBQcm9wcykge1xuICBjb25zdCB7IGZvcm1hdE1lc3NhZ2UgfSA9IHVzZUludGwoKTtcblxuICBjb25zdCBlcnJvck1lc3NhZ2U6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHVzZU1lbW8oKCkgPT4ge1xuICAgIGlmIChlcnJvcj8uY29kZSA9PT0gJ2Vyckxvd0xpcXVpZGl0eScpIHtcbiAgICAgIHRyaWdnZXJBbmFseXRpY3M/LigpO1xuICAgICAgcmV0dXJuIGZvcm1hdE1lc3NhZ2UobWVzc2FnZXMubGlxdWlkaXR5RXJyb3IpO1xuICAgIH1cbiAgICBpZiAoZXJyb3I/LmNvZGUpIHtcbiAgICAgIGlmIChlcnJvci5jb2RlLmluY2x1ZGVzKCdNaW5lckZlZScpIHx8IGVycm9yLmNvZGUuaW5jbHVkZXMoJ2Ftb3VudFRvb0xvdycpKSB7XG4gICAgICAgIC8vIGVycm9yIG1lc3NhZ2UgaXMgY29taW5nIGZyb20gY2xpZW50IGFuZCBhbHJlYWR5IGZvcm1hdHRlZCBjb3JyZWN0bHlcbiAgICAgICAgcmV0dXJuIGVycm9yLm1lc3NhZ2U7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGVycm9yQ29kZSA9IGNhbWVsQ2FzZShlcnJvci5jb2RlKSBhcyBrZXlvZiB0eXBlb2YgZXJyb3JNZXNzYWdlcztcblxuICAgICAgbGV0IG1lc3NhZ2UgPSBlcnJvck1lc3NhZ2VzLnNvbWV0aGluZ1dlbnRXcm9uZztcbiAgICAgIHN3aXRjaCAoZXJyb3JDb2RlKSB7XG4gICAgICAgIGNhc2UgJ3Vuc3VwcG9ydGVkQ2hhaW5JZE1lc3NhZ2UnOlxuICAgICAgICAgIG1lc3NhZ2UgPSBlcnJvck1lc3NhZ2VzLnVuc3VwcG9ydGVkQ2hhaW5JZE1lc3NhZ2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3VuYWJsZVRvRXN0aW1hdGVHYXMnOlxuICAgICAgICAgIG1lc3NhZ2UgPSBlcnJvck1lc3NhZ2VzLnVuYWJsZVRvRXN0aW1hdGVHYXM7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3NpbXVsYXRvcldhcm5pbmcnOlxuICAgICAgICAgIG1lc3NhZ2UgPSBlcnJvck1lc3NhZ2VzLnNpbXVsYXRvcldhcm5pbmc7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3RyYWRlTm90U3VwcG9ydGVkJzpcbiAgICAgICAgICBtZXNzYWdlID0gZXJyb3JNZXNzYWdlcy50cmFkZU5vdFN1cHBvcnRlZDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZvcm1hdE1lc3NhZ2UobWVzc2FnZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZvcm1hdE1lc3NhZ2UobWVzc2FnZXMuZ2VuZXJpY0Vycm9yKTtcbiAgfSwgW2Vycm9yLmNvZGUsIGVycm9yLm1lc3NhZ2UsIGZvcm1hdE1lc3NhZ2UsIHRyaWdnZXJBbmFseXRpY3NdKTtcblxuICByZXR1cm4gKFxuICAgIDxIU3RhY2sgdGVzdElEPVwidHgtZXJyb3JcIj5cbiAgICAgIDxUZXh0TGVnYWwgYXM9XCJkaXZcIiBjb2xvcj1cImZnTmVnYXRpdmVcIj5cbiAgICAgICAge2Vycm9yTWVzc2FnZX1cbiAgICAgICAge2hhc1Rvb2x0aXAgPyAoXG4gICAgICAgICAgPEJveCBjbGFzc05hbWU9e3Rvb2x0aXBDbGFzc30gdGVzdElEPVwidHgtZXJyb3ItdG9vbHRpcFwiPlxuICAgICAgICAgICAgPEljb24gbmFtZT1cImluZm9cIiBzaXplPVwieHNcIiBjb2xvcj1cImZnTmVnYXRpdmVcIiAvPlxuICAgICAgICAgIDwvQm94PlxuICAgICAgICApIDogbnVsbH1cbiAgICAgIDwvVGV4dExlZ2FsPlxuICAgIDwvSFN0YWNrPlxuICApO1xufVxuXG5jb25zdCB0b29sdGlwQ2xhc3MgPSBjc3NgXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgbWFyZ2luOiAwIDAgMCA0cHg7XG5gO1xuIl19*/
@layer cds{.lottieStyles-lgkhslj .palette_fg_stroke{stroke:var(--color-fg);}.lottieStyles-lgkhslj .palette_fg_fill{fill:var(--color-fg);}.lottieStyles-lgkhslj .palette_fgMuted_stroke{stroke:var(--color-fgMuted);}.lottieStyles-lgkhslj .palette_fgMuted_fill{fill:var(--color-fgMuted);}.lottieStyles-lgkhslj .palette_bg_stroke{stroke:var(--color-bg);}.lottieStyles-lgkhslj .palette_bg_fill{fill:var(--color-bg);}.lottieStyles-lgkhslj .palette_bgAlternate_stroke{stroke:var(--color-bgAlternate);}.lottieStyles-lgkhslj .palette_bgAlternate_fill{fill:var(--color-bgAlternate);}.lottieStyles-lgkhslj .palette_bgInverse_stroke{stroke:var(--color-bgInverse);}.lottieStyles-lgkhslj .palette_bgInverse_fill{fill:var(--color-bgInverse);}.lottieStyles-lgkhslj .palette_bgOverlay_stroke{stroke:var(--color-bgOverlay);}.lottieStyles-lgkhslj .palette_bgOverlay_fill{fill:var(--color-bgOverlay);}.lottieStyles-lgkhslj .palette_bgLine_stroke{stroke:var(--color-bgLineHeavy);}.lottieStyles-lgkhslj .palette_bgLine_fill{fill:var(--color-bgLineHeavy);}.lottieStyles-lgkhslj .palette_bgLineHeavy_stroke{stroke:var(--color-bgLineHeavy);}.lottieStyles-lgkhslj .palette_bgLineHeavy_fill{fill:var(--color-bgLineHeavy);}.lottieStyles-lgkhslj .palette_bgPrimary_stroke{stroke:var(--color-bgPrimary);}.lottieStyles-lgkhslj .palette_bgPrimary_fill{fill:var(--color-bgPrimary);}.lottieStyles-lgkhslj .palette_bgPrimaryWash_stroke{stroke:var(--color-bgPrimaryWash);}.lottieStyles-lgkhslj .palette_bgPrimaryWash_fill{fill:var(--color-bgPrimaryWash);}.lottieStyles-lgkhslj .palette_fgInverse_stroke{stroke:var(--color-fgInverse);}.lottieStyles-lgkhslj .palette_fgInverse_fill{fill:var(--color-fgInverse);}.lottieStyles-lgkhslj .palette_bgNegative_stroke{stroke:var(--color-bgNegative);}.lottieStyles-lgkhslj .palette_bgNegative_fill{fill:var(--color-bgNegative);}.lottieStyles-lgkhslj .palette_bgNegativeWash_stroke{stroke:var(--color-bgNegativeWash);}.lottieStyles-lgkhslj .palette_bgNegativeWash_fill{fill:var(--color-bgNegativeWash);}.lottieStyles-lgkhslj .palette_bgPositive_stroke{stroke:var(--color-bgPositive);}.lottieStyles-lgkhslj .palette_bgPositive_fill{fill:var(--color-bgPositive);}.lottieStyles-lgkhslj .palette_bgSecondary_stroke{stroke:var(--color-bgSecondary);}.lottieStyles-lgkhslj .palette_bgSecondary_fill{fill:var(--color-bgSecondary);}.lottieStyles-lgkhslj .palette_transparent_stroke{stroke:var(--color-transparent);}.lottieStyles-lgkhslj .palette_transparent_fill{fill:var(--color-transparent);}.lottieStyles-lgkhslj .palette_bgWarning_stroke{stroke:var(--color-bgWarning);}.lottieStyles-lgkhslj .palette_bgWarning_fill{fill:var(--color-bgWarning);}.lottieStyles-lgkhslj .palette_bgWarningWash_stroke{stroke:var(--color-bgWarningWash);}.lottieStyles-lgkhslj .palette_bgWarningWash_fill{fill:var(--color-bgWarningWash);}}

/*# sourceMappingURL=8201.css.map*/