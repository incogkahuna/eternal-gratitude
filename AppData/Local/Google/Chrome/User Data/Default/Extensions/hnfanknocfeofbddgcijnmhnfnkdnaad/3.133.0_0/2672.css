.a1q37wuz{-webkit-transform:scale(calc(2 / 3));-ms-transform:scale(calc(2 / 3));transform:scale(calc(2 / 3));padding-right:var(--spacing-0.5);}
/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL2xpYnMvd2FsbGV0LWNkcy1leHRlbnNpb24vY29tcG9uZW50cy9Vc2VyQXZhdGFyL0F2YXRhckJveC50c3giXSwibmFtZXMiOlsiLmExcTM3d3V6Il0sIm1hcHBpbmdzIjoiQUFFeUJBIiwiZmlsZSI6Ii93b3Jrc3BhY2VzL2xpYnMvd2FsbGV0LWNkcy1leHRlbnNpb24vY29tcG9uZW50cy9Vc2VyQXZhdGFyL0F2YXRhckJveC50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzdHlsZWQgfSBmcm9tICdAbGluYXJpYS9yZWFjdCc7XG5cbmV4cG9ydCBjb25zdCBBdmF0YXJCb3ggPSBzdHlsZWQuZGl2YFxuICB0cmFuc2Zvcm06IHNjYWxlKGNhbGMoMiAvIDMpKTtcbiAgcGFkZGluZy1yaWdodDogdmFyKC0tc3BhY2luZy0wXFwuNSk7XG5gO1xuIl19*/
.n1wo4ekf{position:absolute;bottom:0;right:0;width:16px;height:16px;left:20px;top:22px;border-radius:50%;}
/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL2xpYnMvd2FsbGV0LWNkcy1leHRlbnNpb24vY29tcG9uZW50cy9UeERldGFpbHMvRGFwcFR4UmVxdWVzdEhlYWRlci50c3giXSwibmFtZXMiOlsiLm4xd280ZWtmIl0sIm1hcHBpbmdzIjoiQUEwSHFCQSIsImZpbGUiOiIvd29ya3NwYWNlcy9saWJzL3dhbGxldC1jZHMtZXh0ZW5zaW9uL2NvbXBvbmVudHMvVHhEZXRhaWxzL0RhcHBUeFJlcXVlc3RIZWFkZXIudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbWVtbywgdXNlQ2FsbGJhY2ssIHVzZU1lbW8sIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgZGVmaW5lTWVzc2FnZXMsIHVzZUludGwgfSBmcm9tICdyZWFjdC1pbnRsJztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BsaW5hcmlhL2NvcmUnO1xuaW1wb3J0IHsgZ2V0SG9zdE5hbWVGb3JEYXBwIH0gZnJvbSAnY2Itd2FsbGV0LWFuYWx5dGljcy91dGlscy9nZXRIb3N0TmFtZUZvckRhcHAnO1xuaW1wb3J0IHsgRGFwcEluZm8gfSBmcm9tICdjYi13YWxsZXQtZGF0YS9jaGFpbnMvQWNjb3VudEJhc2VkL3NoYXJlZC90eXBlcy9EYXBwSW5mbyc7XG5pbXBvcnQgeyBJY29uTmFtZSB9IGZyb20gJ0BjYmhxL2Nkcy1jb21tb24nO1xuaW1wb3J0IHsgSWNvbiB9IGZyb20gJ0BjYmhxL2Nkcy13ZWIvaWNvbnMvSWNvbic7XG5pbXBvcnQgeyBCb3gsIEhTdGFjaywgVlN0YWNrIH0gZnJvbSAnQGNiaHEvY2RzLXdlYi9sYXlvdXQnO1xuaW1wb3J0IHsgUmVtb3RlSW1hZ2UgfSBmcm9tICdAY2JocS9jZHMtd2ViL21lZGlhL1JlbW90ZUltYWdlJztcbmltcG9ydCB7IFRvb2x0aXAgfSBmcm9tICdAY2JocS9jZHMtd2ViL292ZXJsYXlzJztcbmltcG9ydCB7IFRleHRIZWFkbGluZSwgVGV4dExlZ2FsIH0gZnJvbSAnQGNiaHEvY2RzLXdlYi90eXBvZ3JhcGh5JztcblxudHlwZSBQcm9wcyA9IHtcbiAgZGFwcEluZm86IERhcHBJbmZvO1xuICBpY29uPzogSWNvbk5hbWU7XG4gIGhlYWRlckRhcHBOYW1lPzogc3RyaW5nO1xuICBpc1Jldm9rZU9wZXJhdGlvbj86IGJvb2xlYW47XG59O1xuXG5jb25zdCBtZXNzYWdlcyA9IGRlZmluZU1lc3NhZ2VzKHtcbiAgdGl0bGU6IHtcbiAgICBkZWZhdWx0TWVzc2FnZTogJ1JldmlldycsXG4gICAgZGVzY3JpcHRpb246ICdyZXZpZXcgdGl0bGUnLFxuICB9LFxuICBkYXBwVXJsUmVxdWVzdFRleHQ6IHtcbiAgICBkZWZhdWx0TWVzc2FnZTogJ1JlcXVlc3QgZnJvbSB7ZGFwcFVSTH0nLFxuICAgIGRlc2NyaXB0aW9uOiAnRGFwcCByZXF1ZXN0IGhvc3QgVVJMJyxcbiAgfSxcbiAgZGFwcFVybFJldm9rZVRleHQ6IHtcbiAgICBkZWZhdWx0TWVzc2FnZTogJ1Jldm9rZSBhbGxvd2FuY2UgdG8ge2RhcHBVUkx9JyxcbiAgICBkZXNjcmlwdGlvbjogJ0RhcHAgcmVxdWVzdCBob3N0IFVSTCcsXG4gIH0sXG4gIGhlYWRlclRvb3RsdGlwOiB7XG4gICAgZGVmYXVsdE1lc3NhZ2U6ICdPbmx5IHNpZ24gaWYgeW91IGZ1bGx5IHRydXN0IHRoaXMgc2l0ZSB3aXRoIGFjY2VzcyB0byB5b3VyIGFjY291bnQnLFxuICAgIGRlc2NyaXB0aW9uOiAnSGVhZGVyIHRvb2x0aXAgY29udGVudCcsXG4gIH0sXG59KTtcblxuZnVuY3Rpb24gRGFwcFR4SGVhZGVyRGV0YWlsKHsgZGFwcEluZm8sIGljb24sIGhlYWRlckRhcHBOYW1lLCBpc1Jldm9rZU9wZXJhdGlvbiB9OiBQcm9wcykge1xuICBjb25zdCB7IGZvcm1hdE1lc3NhZ2UgfSA9IHVzZUludGwoKTtcblxuICBjb25zdCB7IGRhcHBMb2dvVVJMLCBkYXBwTG9nb1VSTEFsdCwgbmV0d29ya0JhZGdlVVJMLCBuZXR3b3JrQmFkZ2VBbHQsIGRhcHBVUkwgfSA9IGRhcHBJbmZvO1xuICBjb25zdCBbc291cmNlVXJsLCBzZXRTb3VyY2VVcmxdID0gdXNlU3RhdGUoZGFwcExvZ29VUkwpO1xuICBjb25zdCBzZXRBbHRlcm5hdGl2ZURhcHBMb2dvVVJMID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIHNldFNvdXJjZVVybChkYXBwTG9nb1VSTEFsdCk7XG4gIH0sIFtkYXBwTG9nb1VSTEFsdF0pO1xuXG4gIGNvbnN0IGRhcHBOYW1lOiBzdHJpbmcgPSB1c2VNZW1vKCgpID0+IHtcbiAgICByZXR1cm4gaGVhZGVyRGFwcE5hbWUgfHwgZ2V0SG9zdE5hbWVGb3JEYXBwKGRhcHBVUkwpO1xuICB9LCBbZGFwcFVSTCwgaGVhZGVyRGFwcE5hbWVdKTtcblxuICBjb25zdCBpbWFnZSA9IHVzZU1lbW8oXG4gICAgKCkgPT5cbiAgICAgIGljb24gPyAoXG4gICAgICAgIDxJY29uIG5hbWU9e2ljb259IHNpemU9XCJtXCIgY29sb3I9XCJmZ011dGVkXCIgLz5cbiAgICAgICkgOiAoXG4gICAgICAgIDw+XG4gICAgICAgICAgPFJlbW90ZUltYWdlXG4gICAgICAgICAgICBzb3VyY2U9e3NvdXJjZVVybH1cbiAgICAgICAgICAgIHJlc2l6ZU1vZGU9XCJjb250YWluXCJcbiAgICAgICAgICAgIHdpZHRoPXszMn1cbiAgICAgICAgICAgIGhlaWdodD17MzJ9XG4gICAgICAgICAgICBzaGFwZT1cInNxdWlyY2xlXCJcbiAgICAgICAgICAgIGFsdD17ZGFwcExvZ29VUkxBbHR9XG4gICAgICAgICAgICBvbkVycm9yPXtzZXRBbHRlcm5hdGl2ZURhcHBMb2dvVVJMfVxuICAgICAgICAgIC8+XG4gICAgICAgICAge25ldHdvcmtCYWRnZVVSTCA/IChcbiAgICAgICAgICAgIDxpbWcgY2xhc3NOYW1lPXtuZXR3b3JrQmFkZ2V9IHNyYz17bmV0d29ya0JhZGdlVVJMfSBhbHQ9e25ldHdvcmtCYWRnZUFsdH0gLz5cbiAgICAgICAgICApIDogbnVsbH1cbiAgICAgICAgPC8+XG4gICAgICApLFxuICAgIFtkYXBwTG9nb1VSTEFsdCwgaWNvbiwgbmV0d29ya0JhZGdlQWx0LCBuZXR3b3JrQmFkZ2VVUkwsIHNldEFsdGVybmF0aXZlRGFwcExvZ29VUkwsIHNvdXJjZVVybF0sXG4gICk7XG5cbiAgcmV0dXJuIChcbiAgICA8Qm94IGFsaWduSXRlbXM9XCJmbGV4LXN0YXJ0XCIgcGFkZGluZ1g9ezN9IHBhZGRpbmdZPXsyfT5cbiAgICAgIDxIU3RhY2tcbiAgICAgICAgcGFkZGluZ0VuZD17Mn1cbiAgICAgICAgaGVpZ2h0PVwiMTAwJVwiXG4gICAgICAgIGFsaWduU2VsZj1cImNlbnRlclwiXG4gICAgICAgIHBvc2l0aW9uPVwicmVsYXRpdmVcIlxuICAgICAgICB0ZXN0SUQ9XCJkYXBwLXRyYW5zYWN0aW9uLXJlcXVlc3QtaGVhZGVyXCJcbiAgICAgICAgYWxpZ25JdGVtcz1cImNlbnRlclwiXG4gICAgICA+XG4gICAgICAgIDxCb3ggcG9zaXRpb249XCJyZWxhdGl2ZVwiPntpbWFnZX08L0JveD5cbiAgICAgIDwvSFN0YWNrPlxuICAgICAgPEhTdGFjaz5cbiAgICAgICAgPFZTdGFjaz5cbiAgICAgICAgICA8VGV4dEhlYWRsaW5lIGFzPVwiaDFcIiB0YWJJbmRleD17MH0gcGFkZGluZ0JvdHRvbT17MC41fT5cbiAgICAgICAgICAgIHtmb3JtYXRNZXNzYWdlKG1lc3NhZ2VzLnRpdGxlKX1cbiAgICAgICAgICA8L1RleHRIZWFkbGluZT5cbiAgICAgICAgICA8Qm94IGFsaWduSXRlbXM9XCJjZW50ZXJcIj5cbiAgICAgICAgICAgIDxUZXh0TGVnYWwgYXM9XCJzcGFuXCIgY29sb3I9XCJmZ011dGVkXCI+XG4gICAgICAgICAgICAgIHtmb3JtYXRNZXNzYWdlKFxuICAgICAgICAgICAgICAgIGlzUmV2b2tlT3BlcmF0aW9uID8gbWVzc2FnZXMuZGFwcFVybFJldm9rZVRleHQgOiBtZXNzYWdlcy5kYXBwVXJsUmVxdWVzdFRleHQsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgZGFwcFVSTDogKFxuICAgICAgICAgICAgICAgICAgICA8VGV4dExlZ2FsXG4gICAgICAgICAgICAgICAgICAgICAgYXM9XCJzcGFuXCJcbiAgICAgICAgICAgICAgICAgICAgICBjb2xvcj1cImZnXCJcbiAgICAgICAgICAgICAgICAgICAgICBrZXk9XCJkb21haW4tbmFtZS1zdHlsZVwiXG4gICAgICAgICAgICAgICAgICAgICAgdGVzdElEPVwiZGFwcC10cmFuc2FjdGlvbi1yZXF1ZXN0LWhlYWRlci1kYXBwLW5hbWVcIlxuICAgICAgICAgICAgICAgICAgICAgIG92ZXJmbG93PVwiYnJlYWtcIlxuICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAge2RhcHBOYW1lfVxuICAgICAgICAgICAgICAgICAgICA8L1RleHRMZWdhbD5cbiAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDwvVGV4dExlZ2FsPlxuICAgICAgICAgICAgPFRvb2x0aXAgY29udGVudD17Zm9ybWF0TWVzc2FnZShtZXNzYWdlcy5oZWFkZXJUb290bHRpcCl9IHBsYWNlbWVudD1cImJvdHRvbVwiPlxuICAgICAgICAgICAgICA8SWNvbiBuYW1lPVwiaW5mb1wiIHNpemU9XCJ4c1wiIGNvbG9yPVwiZmdNdXRlZFwiIHBhZGRpbmdTdGFydD17MX0gLz5cbiAgICAgICAgICAgIDwvVG9vbHRpcD5cbiAgICAgICAgICA8L0JveD5cbiAgICAgICAgPC9WU3RhY2s+XG4gICAgICA8L0hTdGFjaz5cbiAgICA8L0JveD5cbiAgKTtcbn1cblxuZXhwb3J0IGNvbnN0IERhcHBUeFJlcXVlc3RIZWFkZXIgPSBtZW1vKERhcHBUeEhlYWRlckRldGFpbCk7XG5cbmNvbnN0IG5ldHdvcmtCYWRnZSA9IGNzc2BcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBib3R0b206IDA7XG4gIHJpZ2h0OiAwO1xuICB3aWR0aDogMTZweDtcbiAgaGVpZ2h0OiAxNnB4O1xuICBsZWZ0OiAyMHB4O1xuICB0b3A6IDIycHg7XG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcbmA7XG4iXX0=*/
@layer cds{.baseStyle-bt1rln1{margin:0;}
.subtitleStyle-sve89pn{overflow:auto;text-overflow:unset;white-space:normal;}
.titleStyle-t166a7nm{display:block;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;min-width:0;}}
.pmv46nh{word-break:break-word;margin:0;}
/*# sourceMappingURL=data:application/json;base64,*/

/*# sourceMappingURL=2672.css.map*/