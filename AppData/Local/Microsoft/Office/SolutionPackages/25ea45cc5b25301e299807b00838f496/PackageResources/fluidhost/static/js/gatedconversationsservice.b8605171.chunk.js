"use strict";(self.webpackChunkfluidhost=self.webpackChunkfluidhost||[]).push([[42967],{9575:(e,t,r)=>{r.d(t,{z:()=>i});var s=r(38921),n=r(68552);class i extends n.K{extractNewEntityId(e){throw new s.v("extractNewEntityId should not be called for UpdateRequest")}constructor(e,t,r,s,i){super(e,t,r,s,n.Y.Update,i)}}},19377:(e,t,r)=>{r.d(t,{E:()=>i});var s=r(19853),n=r.n(s);class i{duplicateRequestsComparator(e,t){return!(e.entityId!==t.entityId||e.requestType!==t.requestType||!n()(e.requestParams,t.requestParams))}duplicateRequestHandler(e,t){return e.duplicateRequests.push(t.primaryRequest),null!=t.viewIds&&null!=e.viewIds?e.viewIds.push(...t.viewIds):e.viewIds=void 0,e}constructor(e,t){this.service=e,this.requestPrioritizer=t}}},39287:(e,t,r)=>{r.d(t,{k:()=>i});var s=r(38921),n=r(68552);class i extends n.K{extractNewEntityId(e){throw new s.v("extractNewEntityId should not be called for PlannerReadRequest")}updateRequestParams(e,t){}constructor(e,t,r,s,i){super(e,t,r,s,n.Y.Update,i)}}},84251:(e,t,r)=>{r.r(t),r.d(t,{GatedConversationsService:()=>u});var s=r(19377),n=r(88636),i=r(39287),o=r(87596),a=r(18113);class u extends s.E{getGroupConversationThreadAsync(e,t,r,s){const n=null==s?a.Q.Priority5:s;return new Promise((s,o)=>{const a=new i.k(`GET_GROUP_CONVERSATION_THREAD-${e.groupId}-${e.threadId}`,this.service.getGroupConversationThreadAsync.bind(this.service),e,{resolve:s,reject:o},[]);this.requestPrioritizer.handleRequest(a,n,this.duplicateRequestsComparator,this.duplicateRequestHandler,t,r)})}createGroupConversationThreadAsync(e,t){const r=null==t?a.Q.Priority1:t;return new Promise((t,s)=>{const i=new n.E(`CREATE_GROUP_CONVERSATION_THREAD-${e.groupId}-${e.threadSubject}`,this.service.createGroupConversationThreadAsync.bind(this.service),e,{resolve:t,reject:s},[]);this.requestPrioritizer.handleRequest(i,r)})}postReplyInGroupConversationThreadAsync(e,t){const r=null==t?a.Q.Priority1:t;return new Promise((t,s)=>{const n=new o.x(`POST_REPLY_GROUP_CONVERSATION_THREAD-${e.groupId}-${e.threadId}`,this.service.postReplyInGroupConversationThreadAsync.bind(this.service),e,{resolve:t,reject:s},[]);this.requestPrioritizer.handleRequest(n,r)})}getGroupConversationThreadPostAsync(e,t,r,s){const n=null==s?a.Q.Priority5:s;return new Promise((s,o)=>{const a=new i.k(`GET_GROUP_CONVERSATION_THREAD_POST-${e.groupId}-${e.threadId}-${e.postId}`,this.service.getGroupConversationThreadPostAsync.bind(this.service),e,{resolve:s,reject:o},[]);this.requestPrioritizer.handleRequest(a,n,this.duplicateRequestsComparator,this.duplicateRequestHandler,t,r)})}}},87596:(e,t,r)=>{r.d(t,{x:()=>n});var s=r(9575);class n extends s.z{updateRequestParams(e,t){}constructor(e,t,r,s,n){super(e,t,r,s,n)}}},88636:(e,t,r)=>{r.d(t,{E:()=>i});var s=r(68552);class n extends s.K{constructor(e,t,r,n,i){super(e,t,r,n,s.Y.Create,i)}}class i extends n{extractNewEntityId(e){return""}updateRequestParams(e,t){}constructor(e,t,r,s,n){super(e,t,r,s,n)}}}}]);
//# sourceMappingURL=gatedconversationsservice.b8605171.chunk.js.map