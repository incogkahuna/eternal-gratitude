"use strict";(self.webpackChunkfluidhost=self.webpackChunkfluidhost||[]).push([[99171],{1471:(e,t,s)=>{s.r(t),s.d(t,{GatedOdspService:()=>a});var r=s(19377),i=s(88636),n=s(39287),o=s(87596),c=s(18113),u=s(43649);class a extends r.E{getDriveItemAsync(e,t,s,r){const i=null==r?c.Q.Priority5:r;return new Promise((r,o)=>{const c=new n.k(`GET_DRIVE_ITEM-${e.driveId}-${e.itemId}`,this.service.getDriveItemAsync.bind(this.service),e,{resolve:r,reject:o},[]);this.requestPrioritizer.handleRequest(c,i,this.duplicateRequestsComparator,this.duplicateRequestHandler,t,s)})}getDriveItemThumbnailAsync(e,t,s,r){const i=null==r?c.Q.Priority5:r;return new Promise((r,o)=>{const c=new n.k(`GET_DRIVE_ITEM_THUMBNAIL-${e.groupId}-${e.itemPath}`,this.service.getDriveItemThumbnailAsync.bind(this.service),e,{resolve:r,reject:o},[]);this.requestPrioritizer.handleRequest(c,i,this.duplicateRequestsComparator,this.duplicateRequestHandler,t,s)})}getDocumentsInGroupFolderAsync(e,t,s,r){const i=null==r?c.Q.Priority5:r;return new Promise((r,o)=>{const c=new n.k(`GET_DOCUMENTS_IN_GROUP_FOLDER-${e.groupId}-${e.folderId}-${e.skipToken??""}`,this.service.getDocumentsInGroupFolderAsync.bind(this.service),e,{resolve:r,reject:o},[]);this.requestPrioritizer.handleRequest(c,i,this.duplicateRequestsComparator,this.duplicateRequestHandler,t,s)})}createUploadSessionAsync(e,t){const s=null==t?c.Q.Priority1:t;return new Promise((t,r)=>{const n=new i.E(`CREATE_UPLOAD_SESSION-${e.groupId}-${e.itemPath}`,this.service.createUploadSessionAsync.bind(this.service),e,{resolve:t,reject:r},[]);this.requestPrioritizer.handleRequest(n,s)})}uploadBytesToSessionAsync(e,t){const s=null==t?c.Q.Priority1:t;return new Promise((t,r)=>{const i=new o.x(`UPLOAD_BYTES_TO_SESSION-${e.uploadSession.id}`,this.service.uploadBytesToSessionAsync.bind(this.service),e,{resolve:t,reject:r},[]);this.requestPrioritizer.handleRequest(i,s)})}cancelUploadSessionAsync(e,t){const s=null==t?c.Q.Priority1:t;return new Promise((t,r)=>{const i=new u.b(`CANCEL_UPLOAD_SESSION-${e.session.id}`,this.service.cancelUploadSessionAsync.bind(this.service),e,{resolve:t,reject:r},[]);this.requestPrioritizer.handleRequest(i,s)})}shareDriveItemAsync(e,t){const s=null==t?c.Q.Priority5:t;return new Promise((t,r)=>{const i=new n.k(`SHARE_DRIVE_ITEM-${e.driveId}-${e.itemId}`,this.service.shareDriveItemAsync.bind(this.service),e,{resolve:t,reject:r},[]);this.requestPrioritizer.handleRequest(i,s)})}}},9575:(e,t,s)=>{s.d(t,{z:()=>n});var r=s(38921),i=s(68552);class n extends i.K{extractNewEntityId(e){throw new r.v("extractNewEntityId should not be called for UpdateRequest")}constructor(e,t,s,r,n){super(e,t,s,r,i.Y.Update,n)}}},19377:(e,t,s)=>{s.d(t,{E:()=>n});var r=s(19853),i=s.n(r);class n{duplicateRequestsComparator(e,t){return!(e.entityId!==t.entityId||e.requestType!==t.requestType||!i()(e.requestParams,t.requestParams))}duplicateRequestHandler(e,t){return e.duplicateRequests.push(t.primaryRequest),null!=t.viewIds&&null!=e.viewIds?e.viewIds.push(...t.viewIds):e.viewIds=void 0,e}constructor(e,t){this.service=e,this.requestPrioritizer=t}}},39287:(e,t,s)=>{s.d(t,{k:()=>n});var r=s(38921),i=s(68552);class n extends i.K{extractNewEntityId(e){throw new r.v("extractNewEntityId should not be called for PlannerReadRequest")}updateRequestParams(e,t){}constructor(e,t,s,r,n){super(e,t,s,r,i.Y.Update,n)}}},43649:(e,t,s)=>{s.d(t,{b:()=>o});var r=s(38921),i=s(68552);class n extends i.K{extractNewEntityId(e){throw new r.v("extractNewEntityId should not be called for DeleteRequest")}constructor(e,t,s,r,n){super(e,t,s,r,i.Y.Delete,n)}}class o extends n{updateRequestParams(e,t){}constructor(e,t,s,r,i){super(e,t,s,r,i)}}},87596:(e,t,s)=>{s.d(t,{x:()=>i});var r=s(9575);class i extends r.z{updateRequestParams(e,t){}constructor(e,t,s,r,i){super(e,t,s,r,i)}}},88636:(e,t,s)=>{s.d(t,{E:()=>n});var r=s(68552);class i extends r.K{constructor(e,t,s,i,n){super(e,t,s,i,r.Y.Create,n)}}class n extends i{extractNewEntityId(e){return""}updateRequestParams(e,t){}constructor(e,t,s,r,i){super(e,t,s,r,i)}}}}]);
//# sourceMappingURL=gatedodspservice.453a9b9d.chunk.js.map