"use strict";(self.webpackChunkfluidhost=self.webpackChunkfluidhost||[]).push([[52487],{9575:(e,s,r)=>{r.d(s,{z:()=>u});var t=r(38921),n=r(68552);class u extends n.K{extractNewEntityId(e){throw new t.v("extractNewEntityId should not be called for UpdateRequest")}constructor(e,s,r,t,u){super(e,s,r,t,n.Y.Update,u)}}},16379:(e,s,r)=>{r.r(s),r.d(s,{GatedPlannerService:()=>i});var t=r(19377),n=r(87596),u=r(43649),a=r(18113);class i extends t.E{addUserToPlannerRosterMembersAsync(e,s){const r=null==s?a.Q.Priority1:s;return new Promise((s,t)=>{const u=new n.x(`ADD_MEMBER_TO_PLANNER_ROSTER-${e.plannerRosterId}-${e.userId}`,this.service.addUserToPlannerRosterMembersAsync.bind(this.service),e,{resolve:s,reject:t},[]);this.requestPrioritizer.handleRequest(u,r)})}removeUserFromPlannerRosterMembersAsync(e,s){const r=null==s?a.Q.Priority1:s;return new Promise((s,t)=>{const n=new u.b(`REMOVE_MEMBER_FROM_PLANNER_ROSTER-${e.plannerRosterId}-${e.userId}`,this.service.removeUserFromPlannerRosterMembersAsync.bind(this.service),e,{resolve:s,reject:t},[]);this.requestPrioritizer.handleRequest(n,r)})}}},19377:(e,s,r)=>{r.d(s,{E:()=>u});var t=r(19853),n=r.n(t);class u{duplicateRequestsComparator(e,s){return!(e.entityId!==s.entityId||e.requestType!==s.requestType||!n()(e.requestParams,s.requestParams))}duplicateRequestHandler(e,s){return e.duplicateRequests.push(s.primaryRequest),null!=s.viewIds&&null!=e.viewIds?e.viewIds.push(...s.viewIds):e.viewIds=void 0,e}constructor(e,s){this.service=e,this.requestPrioritizer=s}}},43649:(e,s,r)=>{r.d(s,{b:()=>a});var t=r(38921),n=r(68552);class u extends n.K{extractNewEntityId(e){throw new t.v("extractNewEntityId should not be called for DeleteRequest")}constructor(e,s,r,t,u){super(e,s,r,t,n.Y.Delete,u)}}class a extends u{updateRequestParams(e,s){}constructor(e,s,r,t,n){super(e,s,r,t,n)}}},87596:(e,s,r)=>{r.d(s,{x:()=>n});var t=r(9575);class n extends t.z{updateRequestParams(e,s){}constructor(e,s,r,t,n){super(e,s,r,t,n)}}}}]);
//# sourceMappingURL=gatedplannerservice.02c33712.chunk.js.map